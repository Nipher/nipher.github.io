{"date":"01 May 2016","post":"<p>Continuando a série &quot;ES6 - O que mudou?&quot;.</p>\n<p>Falarei sobre Template Literals, algo bem simples que é incrívelmente maneiro, acredito que assim como eu, vários devs de JS adoraram essa adição a linguagem.</p>\n<p><strong>Tópicos</strong></p>\n<ul>\n<li>Literal?</li>\n<li>O que são Template Literals?</li>\n<li>Old vs New</li>\n<li>Interpolated Expressions</li>\n<li>Expression Scope</li>\n<li>Tagged Template Literals</li>\n</ul>\n<h2>Literal?</h2>\n<p>Literal é uma notação que representa um valor no nosso código, podendo representar um componente de software, facilitando muito na escrita.</p>\n<p>Um exemplo bem rápido criando um <code>Object</code>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myObj = {}; <span class=\"hljs-comment\">// literal</span>\n<span class=\"hljs-keyword\">let</span> myObj2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>(); <span class=\"hljs-comment\">// non-literal</span>\n</code></pre>\n<p>Temos vários literals no javascript:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myStr = <span class=\"hljs-string\">\"string literal\"</span>;\n<span class=\"hljs-keyword\">let</span> myStr2 = <span class=\"hljs-string\">'string literal'</span>; \n<span class=\"hljs-keyword\">let</span> myRegExp = <span class=\"hljs-regexp\">/^[a-z0-9-]+$/</span>;\n<span class=\"hljs-keyword\">let</span> myRegExp = [];\n</code></pre>\n<p>Usamos literals o tempo todo, para <code>String</code>, <code>RegExp</code>, <code>Array</code>...</p>\n<h2>O que são Template Literals?</h2>\n<p>Template literals são literals que representam uma <code>String</code> com suporte a interpolation e multiplas linhas.</p>\n<h2>Old vs New</h2>\n<p>Antes do ES6, a forma de criar, manipular e gerar dinamicamênte strings é bem pobre, com essa nova feature, conseguimos realizar essas operações mais facilmente.</p>\n<h4>Interpolation</h4>\n<p>Old:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myVar = <span class=\"hljs-string\">'es6'</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Welcome '</span> + myVar + <span class=\"hljs-string\">'!'</span>);\n\n<span class=\"hljs-comment\">// &gt; Welcome es6!</span>\n</code></pre>\n<p>New:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myVar = <span class=\"hljs-string\">'es6'</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Welcome <span class=\"hljs-subst\">${myVar}</span>!`</span>);\n\n<span class=\"hljs-comment\">// &gt; Welcome es6!</span>\n</code></pre>\n<p>Como podemos ver, temos uma nova sintaxe literal para criar strings, usando <code>`</code> no ínicio e no fim.</p>\n<p>Além disso podemos inserir resultados de expressões dentro da string em uma posição específica, usando <code>${..}</code> para definir a área que será interpretada.</p>\n<h4>Multiplas linhas</h4>\n<p>Old:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myText = <span class=\"hljs-string\">'This is the first line\\n'</span> +\n  <span class=\"hljs-string\">'This is the second line\\n'</span> +\n  <span class=\"hljs-string\">'This is the third line'</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(myText);\n\n<span class=\"hljs-comment\">// &gt; This is the first line </span>\n<span class=\"hljs-comment\">//   This is the second line </span>\n<span class=\"hljs-comment\">//   This is the third line</span>\n</code></pre>\n<p>New:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> myText = <span class=\"hljs-string\">`This is the first line\nThis is the second line\nThis is the third line`</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(myText);\n\n<span class=\"hljs-comment\">// &gt; This is the first line </span>\n<span class=\"hljs-comment\">//   This is the second line </span>\n<span class=\"hljs-comment\">//   This is the third line</span>\n</code></pre>\n<p>Usando <code>`</code> como comentado anteriormente podemos criar strings de multiplas linhas, sem a necessidade de concatenar com o operador <code>+</code> e adicionar o <code>\\n</code> para declarar a quebra de linha.</p>\n<h2>Interpolated Expressions</h2>\n<p>Interpolated Expressions são expressões que você pode executar de uma forma com que seu resultado seja inserido dentro da string.</p>\n<p>Exemplos:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`4 * 3 equals <span class=\"hljs-subst\">${<span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">3</span>}</span>`</span>);\n\n<span class=\"hljs-comment\">// &gt; 4 * 3 equals 12</span>\n</code></pre>\n<p>No exemplo acima estamos inserindo na string o resultado da execução de uma multiplicação.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">5.123124</span>,\n  name = <span class=\"hljs-string\">'Vincent'</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name.toUpperCase()}</span>, you owe me U$<span class=\"hljs-subst\">${value.toFixed(<span class=\"hljs-number\">2</span>)}</span>!`</span>);\n\n<span class=\"hljs-comment\">// &gt; VINCENT, you owe me U$5.12!</span>\n</code></pre>\n<p>Nesse exemplo chamamos métodos das variáveis <code>name</code> e <code>value</code>, o retorno dos métodos são inseridos na string.</p>\n<p>Outro exemplo usando funções:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${getUserName()}</span>.`</span>);\n\n<span class=\"hljs-comment\">// &gt; Hello, Vincent.</span>\n</code></pre>\n<p>Nesse exemplo, imagine que temos uma função que retorna o nome do usuário, chamada <code>getUserName</code>, podemos executar essa função dentro da área <code>${..}</code> que seu retorno será inserido na string.</p>\n<p>Então, dentro dessa área, podemos inserir qualquer expressão, até mesmo outro Template Literal.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'Leo'</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>`</span>}</span>`</span>}</span>.`</span>);\n\n<span class=\"hljs-comment\">// &gt; Hello, Leo.</span>\n</code></pre>\n<h2>Expression Scope</h2>\n<p>Algo rápido e interessante de mostar é como funciona o escopo usado para resolver valores das variaveis inseridas dentro da string, uma forma de entender, é enxergar a expressão como se fosse uma <code>IIFE</code>.</p>\n<p>Exemplo:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\">str</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'foo'</span>;\n\n  <span class=\"hljs-built_in\">console</span>.log(str);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'bar'</span>;\n\n  foo(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${name}</span>!`</span>);\n}\n\n<span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'global'</span>;\n\nbar();\n</code></pre>\n<p>Então, o que aconteceu acima?</p>\n<ul>\n<li>Declaramos uma veriável no escopo global chamada <code>name</code> com o valor <code>'global'</code></li>\n<li>Chamamos a função <code>bar</code></li>\n<li><code>bar</code> declara uma variável também chamada <code>name</code></li>\n<li><code>bar</code> chama a função <code>foo</code> passando como parâmetro uma string com uma variável <code>name</code> inserida nela</li>\n<li><code>foo</code> recebe como parâmetro essa string e declara outra variável chamada <code>name</code></li>\n<li><code>foo</code> chama <code>console.log</code> passando como parâmetro a string que veio de <code>bar</code></li>\n</ul>\n<p>A questão é, qual das variáveis <code>name</code> realmente foi inserida dentro da string, o <code>name</code> global, de <code>bar</code> ou de <code>foo</code>?</p>\n<p>O resultado do código é esse:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// &gt; Hello bar!</span>\n</code></pre>\n<p>A variável <code>name</code> de <code>bar</code> que realmente foi utilizada, a expressão usa a referência do escopo de onde ela foi declarada (dentro da função <code>bar</code>).</p>\n<h2>Tagged Template Literals</h2>\n<p>Essa feature pode parecer meio estranha e não prática no ínicio, mas depois de ver algumas aplicações dela, você consegue visualizar sua utilidade.</p>\n<p>Ela é uma forma mais avançada de Template Literals. Você pode customizar completamente o seu comportamento usando uma função.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">const</span> moment = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'moment'</span>);\n\n<span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'Jonas'</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tag</span> (<span class=\"hljs-params\">strings, ...values</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(strings[<span class=\"hljs-number\">0</span>]);\n  <span class=\"hljs-built_in\">console</span>.log(strings[<span class=\"hljs-number\">1</span>]);\n  <span class=\"hljs-built_in\">console</span>.log(strings[<span class=\"hljs-number\">2</span>]);\n\n  <span class=\"hljs-built_in\">console</span>.log(values[<span class=\"hljs-number\">0</span>]);\n  <span class=\"hljs-built_in\">console</span>.log(values[<span class=\"hljs-number\">1</span>]);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Whatever <span class=\"hljs-subst\">${values[<span class=\"hljs-number\">0</span>]}</span>!`</span>;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(tag<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${name}</span> and I'm <span class=\"hljs-subst\">${moment().diff(<span class=\"hljs-string\">'1994-03-08'</span>, <span class=\"hljs-string\">'years'</span>)}</span> years old`</span>);\n\n<span class=\"hljs-comment\">// &gt; Hello, my name is </span>\n<span class=\"hljs-comment\">// &gt;  and I'm </span>\n<span class=\"hljs-comment\">// &gt;  years old</span>\n\n<span class=\"hljs-comment\">// &gt; Jonas</span>\n<span class=\"hljs-comment\">// &gt; 22</span>\n\n<span class=\"hljs-comment\">// &gt; Whatever Jonas!</span>\n</code></pre>\n<p>Antes de tudo, <code>tag<code>..</code></code>, não é nada similar a qualquer sintaxe que já vimos no JS, o que é isso?</p>\n<p>Isso é um tipo especial de chamada de função que não precisa dos <code>(..)</code>, e não precisa necessáriamente ser uma função, podemos fazer isso com qualquer expressão que retorne uma função.</p>\n<p>O primeiro argumento é um array de strings (<code>'Hello, my name is '</code>, <code>' and I'm '</code> e <code>'' years old'</code> nesse exemplo). A partir do segundo argumento, recebemos os resultados das expressões inseridas dentro dos <code>${..}</code> (<code>'Jonas'</code> e <code>'22'</code>). No final, a função retorna outra string.</p>\n<p>Não tem nada de especial no nome da função <code>tag</code>, podemos definir qualquer função com qualquer nome.</p>\n<p>Bom, é isso galera, se vocês quiserem se aprofundar mais nesse assunto, recomendo alguns links:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2015/01/ES6-Template-Strings\">Post</a> bem maneiro do <a href=\"https://twitter.com/addyosmani\">Addy Osmani</a></li>\n<li><a href=\"http://www.2ality.com/2015/01/template-strings-html.html\">Post</a> do <a href=\"https://twitter.com/rauschma\">Axel Rauschmayer</a></li>\n<li><a href=\"https://developer.mozilla.org\">MDN</a> é claro, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">artigo</a></li>\n</ul>\n<p>E qualquer coisa, comentem ai em baixo :)</p>\n","metaData":{"layout":"post","title":"ES6 - Template Literals","slug":"es6-template-literals","description":"Veja o que são ES6 template literals e as melhorias que trazem para o javascript.","date":"2016-05-01 20:23:43 -0300","language":"Brazilian Portuguese","excerpt":"Falarei sobre Template Literals, algo bem simples que é incrívelmente maneiro, acredito que assim como eu, vários devs de JS adoraram essa adição a linguagem.\n","tags":["es6","js"],"categories":["ES6 - O que mudou?"]},"slug":"es6-template-literals"}