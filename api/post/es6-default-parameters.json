{"date":"21 Apr 2016","post":"<p>Continuando a série &quot;ES6 - O que mudou?&quot;.</p>\n<p>Esse post será sobre definir valores predefinidos para parâmetros de uma função com ES6.</p>\n<p>Lista dos tópicos que irei abordar:</p>\n<ul>\n<li>Descrição</li>\n<li>Old way</li>\n<li>Sintaxe ES6</li>\n<li>Exemplos</li>\n</ul>\n<h2>Descrição</h2>\n<p>No javascript, quando declaramos uma função que recebe parâmetros, podemos notar que ao chamá-la sem passarmos nenhum valor vamos receber <code>undefined</code> como resultado. Mas em certas ocasiões, queremos que algum valor seja atrelado a esses parâmetros, caso a função seja chamada sem nenhum.</p>\n<p>Queremos que o parâmetro tenha um valor predefinido.</p>\n<h2>Old way</h2>\n<p>Como fazemos isso sem ES6?</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span> (<span class=\"hljs-params\">name</span>) </span>{\n  name = <span class=\"hljs-keyword\">typeof</span> name !== <span class=\"hljs-string\">'undefined'</span> ? name : <span class=\"hljs-string\">'World'</span>;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello '</span> + name);\n}\n\nhello(<span class=\"hljs-string\">'People'</span>);\nhello();\n\n<span class=\"hljs-comment\">// &gt; Hello People</span>\n<span class=\"hljs-comment\">// &gt; Hello World</span>\n</code></pre>\n<p>Então, o que aconteceu?</p>\n<ol>\n<li>Temos uma função chamada <code>hello</code> que recebe um parâmetro chamado <code>name</code></li>\n<li>Assim que a função é executada, checamos se o tipo do parâmetro <code>name</code> é diferente de <code>undefined</code>, se sim usamos o <code>name</code> se não, definimos <code>name</code> como <code>'World'</code></li>\n<li>Logamos uma mensagem <code>'Hello ' + name</code></li>\n<li>Chamamos a função passando <code>'People'</code> como o valor de <code>name</code>, que resulta no log <code>'Hello People'</code></li>\n<li>Chamamos a função sem passarmos nenhum valor como parâmetro, que resulta no log <code>'Hello World'</code></li>\n</ol>\n<h2>Sintaxe ES6</h2>\n<p>Como vimos anteriormente, uma das formas de definir um valor padrão para um parâmetro é simples, porém não tão simples como em outras linguagens.</p>\n<p>Com ES6 isso muda, ganhamos uma nova sintaxe que deixará nosso código bem mais fácil de escrever e amigável.</p>\n<p>Vamos reproduzir o exemplo anterior com ES6 e sua nova sintaxe de definir valores padrões aos parâmetros.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span> (<span class=\"hljs-params\">name = <span class=\"hljs-string\">'World'</span></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${name}</span>`</span>);\n}\n\nhello(<span class=\"hljs-string\">'People'</span>);\nhello();\n\n<span class=\"hljs-comment\">// &gt; Hello People</span>\n<span class=\"hljs-comment\">// &gt; Hello World</span>\n</code></pre>\n<p>Então, bem melhor?</p>\n<p>Pode parecer besteira, mas isso faz muita diferença, seu código fica muito mais semântico e você passa a escrever seu código com muito mais gosto.\nE muito provavelmente as pessoas usarão bem mais essa funcionalidade, já que a facilidade do seu uso aumentou tanto com essa nova sintaxe.</p>\n<p>E como isso já é padrão em outras linguagens, já estava na hora do javascript adicionar isso também.</p>\n<h2>Exemplos</h2>\n<p>Mostrarei alguns exemplos separados por situação, é bom entendermos como essa funcionalidade reagirá em cada uma.</p>\n<h4>Passando <code>undefined</code></h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span> (<span class=\"hljs-params\">message = <span class=\"hljs-string\">'Hello'</span>, name = <span class=\"hljs-string\">'World'</span></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span> <span class=\"hljs-subst\">${name}</span>`</span>);\n}\n\nsay(<span class=\"hljs-string\">'Hey'</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-string\">'Hi'</span>, <span class=\"hljs-literal\">undefined</span>);\nsay(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>);\n\n<span class=\"hljs-comment\">// &gt; Hey People</span>\n<span class=\"hljs-comment\">// &gt; Hello People</span>\n<span class=\"hljs-comment\">// &gt; Hi World</span>\n<span class=\"hljs-comment\">// &gt; Hello World</span>\n</code></pre>\n<h4>Passando <code>null</code></h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span> (<span class=\"hljs-params\">message = <span class=\"hljs-string\">'Hello'</span>, name = <span class=\"hljs-string\">'World'</span></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span> <span class=\"hljs-subst\">${name}</span>`</span>);\n}\n\nsay(<span class=\"hljs-string\">'Hey'</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-string\">'Hi'</span>, <span class=\"hljs-literal\">null</span>);\nsay(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);\n\n<span class=\"hljs-comment\">// &gt; Hey People</span>\n<span class=\"hljs-comment\">// &gt; null People</span>\n<span class=\"hljs-comment\">// &gt; Hi null</span>\n<span class=\"hljs-comment\">// &gt; null null</span>\n</code></pre>\n<p>Como <code>null</code> é um valor &quot;falso&quot;, podiamos esperar que fosse substituido pelo valor padrão que definimos, mas essa funcionalidade só será aplicada se o valor do parâmetro for <code>undefined</code> ou se não passarmos nada como valor.</p>\n<p>O mesmo se aplica ao valor <code>0</code>, como sabemos, <code>0</code> é um valor &quot;falso&quot;.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span> (<span class=\"hljs-params\">message = <span class=\"hljs-string\">'Hello'</span>, name = <span class=\"hljs-string\">'World'</span></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span> <span class=\"hljs-subst\">${name}</span>`</span>);\n}\n\nsay(<span class=\"hljs-string\">'Hey'</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'People'</span>);\nsay(<span class=\"hljs-string\">'Hi'</span>, <span class=\"hljs-number\">0</span>);\nsay(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-comment\">// &gt; Hey People</span>\n<span class=\"hljs-comment\">// &gt; 0 People</span>\n<span class=\"hljs-comment\">// &gt; Hi 0</span>\n<span class=\"hljs-comment\">// &gt; 0 0</span>\n</code></pre>\n<h4>Avaliados em tempo de execução da função</h4>\n<p>Diferente de outras linguagens, o valor padrão do parâmetro é definido novamente a cada chamada da função, ou seja, para cada chamada será uma referência completamente nova.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span> (<span class=\"hljs-params\">value, list = []</span>) </span>{\n  list.push(value);\n  <span class=\"hljs-keyword\">return</span> list;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-string\">'test'</span>));\n<span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-string\">'test2'</span>));\n\n<span class=\"hljs-comment\">// &gt; ['test']</span>\n<span class=\"hljs-comment\">// &gt; ['test2']</span>\n</code></pre>\n<p>Chamamos a função duas vezes, e para cada vez que chamamos, o parâmetro <code>list</code> é um array completamente novo, em python, por exemplo, teriamos no final uma lista assim: <code>['test', 'test2']</code>.</p>\n<h4>Usando funções</h4>\n<p>Podemos usar o valor retornado de uma função.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getList</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> [];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span> (<span class=\"hljs-params\">value, list = getList(</span>)) </span>{\n  list.push(value);\n  <span class=\"hljs-keyword\">return</span> list;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-string\">'test'</span>));\n<span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-string\">'test2'</span>));\n\n<span class=\"hljs-comment\">// &gt; ['test']</span>\n<span class=\"hljs-comment\">// &gt; ['test2']</span>\n</code></pre>\n<p>E como vocês podem ver, a cada chamada que fazemos na função <code>add</code>, a função <code>getList</code> é chamada e seu retorno é usado para definir o valor do parâmetro <code>list</code>.</p>\n<h4>Usando parâmetros</h4>\n<p>Podemos usar parâmetros definidos anteriormente.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\">x, y = x+<span class=\"hljs-number\">1</span>, z = x+y</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> [x, y, z];\n}\n\n<span class=\"hljs-built_in\">console</span>.log(foo(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-built_in\">console</span>.log(foo(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">20</span>));\n\n<span class=\"hljs-comment\">// &gt; [2, 3, 5]</span>\n<span class=\"hljs-comment\">// &gt; [2, 20, 22]</span>\n</code></pre>\n<h4>Definindo uma callback vazia</h4>\n<p>Neste exemplo, definimos uma callback vazia, caso alguém chame a função <code>ajax</code> sem callback.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ajax</span> (<span class=\"hljs-params\">url, cb = function (</span>) </span>{}) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>É isso galera</p>\n<p>A intenção do post foi tentar esclarecer dúvidas com alguns exemplos e mostrar o funcionamento dessa nova sintaxe bem simples e gratificante de usar \\o/</p>\n","metaData":{"layout":"post","title":"ES6 - Default Parameters","slug":"es6-default-parameters","description":"Entenda parâmetros predefinidos em javascript com a nova sintaxe do es6.","date":"2016-04-21 11:25:43 -0300","language":"Brazilian Portuguese","excerpt":"Continuando a série \"ES6 - O que mudou?\".\n\nEsse post será sobre definir valores predefinidos para parâmetros de uma função com ES6.\n\nLista dos tópicos que irei abordar:\n\n- Descrição\n- Old way\n- Sintaxe ES6\n- Exemplos\n","tags":["es6","js"],"categories":["ES6 - O que mudou?"]},"slug":"es6-default-parameters"}